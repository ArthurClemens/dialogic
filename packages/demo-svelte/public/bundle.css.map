{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { Notification, notification, Dialog, dialog } from \"dialogic-svelte\";\n  import DefaultContent from \"./default/Content.svelte\";\n  import IntervalContent from \"./interval/Content.svelte\";\n\n  const dialogCount = dialog.count;\n  const notificationCount = notification.count;\n\n  const getRandomNumber = () => Math.round(1000 * Math.random());\n\n  $: showDialogs = true;\n  $: showNotifications = true;\n\n  const dialogOneProps = {\n    showDuration: 0.5,\n    showDelay: 0.25,\n    hideDuration: 0.5,\n    hideDelay: .25,\n    component: IntervalContent,\n    className: \"xxx\",\n    showClassName: \"xxx-visible\",\n    title: \"Clock\"\n  };\n  const dialogTwoProps = {\n    showDuration: 0.75,\n    showDelay: 0,\n    hideDuration: 0.75,\n    hideDelay: 0,\n    component: DefaultContent,\n    className: \"xxx\",\n    showClassName: \"xxx-visible\",\n    title: \"Fade\"\n  };\n  const dialogFourProps = {\n    transitions: {\n      show: domElements => {\n        const el = domElements.domElement;\n        return {\n          duration: 0.5,\n          before: () => (\n            (el.style.opacity = 0),\n            (el.style.transform = \"translate3d(0, 20px, 0)\")\n          ),\n          transition: () => (\n            (el.style.opacity = 1),\n            (el.style.transform = \"translate3d(0, 0px,  0)\")\n          )\n        };\n      },\n      hide: domElements => {\n        const el = domElements.domElement;\n        return { duration: 0.5, transition: () => el.style.opacity = 0 };\n      },\n    },\n    component: DefaultContent,\n    title: \"Transitions\"\n  };\n\n  const clearOptions = {\n    transitions: {\n      hide: domElements => {\n        const el = domElements.domElement;\n        return { duration: 0.5, delay: 0, transition: () => el.style.opacity = 0 };\n      }\n    }\n  };\n</script>\n\n<style>\n  :global(.xxx) {\n    opacity: 0;\n  }\n  :global(.xxx-visible) {\n    opacity: 1;\n  }\n  :global(.xxx-timings) {\n    opacity: 0;\n    transition-duration: 500ms;\n    transition-delay: 0;\n  }\n  :global(.xxx-visible-timings) {\n    opacity: 1;\n  }\n</style>\n\n<button on:click={() => notification.hideAll({ hideDelay: 0, hideDuration: .25 })}>Clear notifications</button>\n\n<button on:click={() => notification.resetAll().catch(() => {})}>Reset notifications</button>\n\n<button on:click={() => dialog.hideAll(clearOptions)}>Clear dialogs</button>\n\n<button on:click={() => dialog.resetAll().catch(() => {})}>Reset dialogs</button>\n\n<hr />\n\n<button on:click={() => showDialogs = !showDialogs}>Toggle dialogs</button>\n\n{#if showDialogs}\n\n<h2>Dialog</h2>\n\n<p>Dialog count = {$dialogCount} </p>\n\n<hr />\n\n<div>\n  <button\n    on:click={() => dialog.show({\n      component: DefaultContent,\n      title: \"Default\"\n    })}>\n    Default\n  </button>\n  <button on:click={() => dialog.hide()}>Hide</button>\n</div>\n\n<div>\n  <button\n    on:click={() => dialog.show({\n      timeout: 2000,\n      component: DefaultContent,\n      title: \"With timer\"\n    })}>\n    With timer\n  </button>\n  <button on:click={() => dialog.hide().catch(() => console.log(\"caught\"))}>Hide</button>\n</div>\n\n<div>\n  <button\n    on:click={() => dialog.show(\n      {\n        didShow: id => console.log(\"didShow\", id),\n        didHide: id => console.log(\"didHide\", id),\n        showDuration: 0.5,\n        showDelay: 0.25,\n        component: DefaultContent,\n        title: \"With Promise\"\n      },\n      {\n        id: \"withPromise\"\n      }\n    ).then(id => console.log(\"dialog shown\", id))}>\n    Show with promises\n  </button>\n  <button on:click={() => dialog.hide(\n    {\n      id: \"withPromise\"\n    }).then(id => console.log(\"dialog hidden\", id))}>Hide</button>\n</div>\n\n<div>\n  <button\n    on:click={() => dialog.show({\n      ...dialogOneProps,\n      showDelay: .5,\n      hideDelay: 0,\n      title: dialogOneProps.title + ' ' + getRandomNumber()\n    }, { id: dialogOneProps.id })}>\n    Show delay\n  </button>\n  <button on:click={() => dialog.hide({ id: dialogOneProps.id })}>Hide</button>\n</div>\n<div>\n  <button\n    on:click={() => dialog.show(dialogTwoProps, { id: dialogTwoProps.id })}>\n    Show slow fade\n  </button>\n  <button on:click={() => dialog.hide({ id: dialogTwoProps.id })}>Hide</button>\n</div>\n<div>\n  <button\n    on:click={() => dialog.show(dialogFourProps, { id: dialogFourProps.id })}>\n    Show transition\n  </button>\n  <button on:click={() => dialog.hide({ id: dialogFourProps.id })}>Hide</button>\n</div>\n<div>\n  <button\n    on:click={() => dialog.show({\n      component: DefaultContent,\n      title: \"Custom spawn\"\n    }, { spawn: 'special' })}>\n    Show default in spawn\n  </button>\n  <button on:click={() => dialog.hide({ spawn: 'special' })}>Hide</button>\n</div>\n\n<hr />\n\n<div>\n  <p>Dialog:</p>\n  <Dialog />\n</div>\n\n<div>\n  <p>Dialog with spawn:</p>\n  <Dialog spawn=\"special\" />\n</div>\n\n<hr />\nQueued dialog\n<div>\n  <button\n    on:click={() => dialog.show({\n      component: DefaultContent,\n      title: 'Queued ' + Math.round(1000 * Math.random())\n    }, { spawn: 'Q', queued: true })}>\n    Queued\n  </button>\n  <button on:click={() => dialog.hide({ spawn: 'Q' })}>Hide</button>\n</div>\n\n<div>\n  <p>Dialog queued:</p>\n  <Dialog spawn=\"Q\" />\n</div>\n\n{/if}\n\n<hr />\n\n<button on:click={() => showNotifications = !showNotifications}>Toggle notifications</button>\n\n{#if showNotifications}\n\n<h2>Notification</h2>\n\n<div>\n  <button\n    on:click={() => notification.show(\n      {\n        didShow: id => console.log(\"didShow\", id),\n        didHide: id => console.log(\"didHide\", id),\n        component: DefaultContent,\n        className: \"xxx-timings\",\n        showClassName: \"xxx-visible-timings\",\n        title: 'N ' + getRandomNumber(),\n      },\n      {\n        spawn: 'NO'\n      }\n    ).then(id => console.log(\"notification shown\", id))}>\n    Queued\n  </button>\n  <button on:click={() => notification.hide(\n      {\n        spawn: 'NO'\n      }\n    ).then(id => console.log(\"notification hidden from App\", id))}>Hide</button>\n  <button on:click={() => notification.pause(\n      {\n        spawn: 'NO'\n      }\n    )}>Pause</button>\n  <button on:click={() => notification.resume(\n    {\n      spawn: 'NO'\n    }\n  )}>Resume</button>\n</div>\n\n<div>\n  <p>Notification queued:</p>\n  <p>Notification count = {$notificationCount} </p>\n  <Notification spawn=\"NO\" />\n</div>\n\n<hr />\n\n{/if}\n\n"
  ],
  "names": [],
  "mappings": "AAqEU,IAAI,AAAE,CAAC,AACb,OAAO,CAAE,CAAC,AACZ,CAAC,AACO,YAAY,AAAE,CAAC,AACrB,OAAO,CAAE,CAAC,AACZ,CAAC,AACO,YAAY,AAAE,CAAC,AACrB,OAAO,CAAE,CAAC,CACV,mBAAmB,CAAE,KAAK,CAC1B,gBAAgB,CAAE,CAAC,AACrB,CAAC,AACO,oBAAoB,AAAE,CAAC,AAC7B,OAAO,CAAE,CAAC,AACZ,CAAC"
}