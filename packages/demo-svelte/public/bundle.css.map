{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { Notification, notification, Dialog, dialog } from \"dialogic-svelte\";\n  import DefaultContent from \"./default/Content.svelte\";\n  import IntervalContent from \"./interval/Content.svelte\";\n  import Remaining from \"./remaining/Remaining.svelte\";\n\n  const dialogCount = dialog.getCount();\n  const timerDialogExists = dialog.exists({\n    id: \"timer\"\n  });\n\n  const notificationCount = notification.getCount({\n    spawn: \"NO\"\n  });\n\n  const notificationItemIsPaused = notification.isPaused({\n    spawn: \"NO\"\n  });\n  const notificationExists = notification.exists({\n    spawn: \"NO\"\n  });\n\n  const getRandomId = () => Math.round(1000 * Math.random()).toString();\n\n  const showInitial = ({ isOnMount } = {}) => dialog.show(\n  {\n    title: getRandomId(),\n    className: \"xxx-content\",\n    dialogic: {\n      component: DefaultContent,\n      styles: {\n        showStart: {\n          opacity: isOnMount ? 1 : 0,\n        },\n        showEnd: {\n          transitionDuration: isOnMount ? 0 : \"500ms\",\n          opacity: 1\n        },\n        hideEnd: {\n          transitionDuration: \"500ms\",\n          opacity: 0\n        }\n      },\n      className: \"xxx\",\n      spawn: \"initial\",\n    },\n  }\n);\n\n  $: showDialogs = true;\n  $: showNotifications = false;\n\n  const dialogOneProps = {\n    component: DefaultContent,\n    dialogic: {\n      styles: {\n        showEnd: {\n          transitionDuration: \"500ms\",\n        },\n        hideEnd: {\n          transitionDuration: \"500ms\",\n        },\n      },\n      className: \"xxx\",\n    },\n    className: \"xxx-content\",\n    title: \"Clock\",\n    id: getRandomId(),\n  };\n  const dialogSlowFadeProps = {\n    dialogic: {\n      component: DefaultContent,\n      className: \"xxx\",\n      styles: {\n        showEnd: {\n          transitionDelay: 0,\n          transitionDuration: \"1s\"\n        },\n        hideEnd: {\n          transitionDelay: 0,\n          transitionDuration: \"1s\"\n        },\n      }\n    },\n    className: \"xxx-content\",\n    title: \"Fade\",\n    id: getRandomId()\n  };\n\n  const dialogDelayProps = {\n  // transitionStyles: {\n  //   default: {\n  //     transitionDuration: \"750ms\",\n  //     transitionDelay: \"250ms\",\n  //   },\n  // },\n  className: \"xxx-content\",\n  dialogic: {\n    component: DefaultContent,\n    className: \"xxx-delay\",\n  },\n  title: \"Delay\",\n  id: getRandomId(),\n};\n\n  const dialogFourProps = {\n    dialogic: {\n      styles: domElement => {\n        const height = domElement.getBoundingClientRect().height;\n        return {\n          default: {\n            transition: \"all 300ms ease-in-out\",\n          },\n          showStart: {\n            opacity: 0,\n            transform: `translate3d(0, ${height}px, 0)`,\n          },\n          showEnd: {\n            opacity: 1,\n            transform: \"translate3d(0, 0px,  0)\",\n          },\n          hideEnd: {\n            transform: `translate3d(0, ${height}px, 0)`,\n            opacity: 0,\n          },\n        }\n      },\n      component: DefaultContent,\n    },\n    title: \"Transitions\",\n    id: getRandomId()\n  };\n\n  const hideAllOptions = {\n    styles: {\n      hideEnd: {\n        transitionDuration: \"500ms\",\n        transitionDelay: \"0ms\",\n        opacity: 0,\n      }\n    }\n  };\n</script>\n\n<style>\n  :global(.xxx) {\n    opacity: 0;\n    transition: opacity 200ms;\n  }\n  :global(.xxx-show-start) {\n    opacity: 0;\n  }\n  :global(.xxx-show-end) {\n    opacity: 1;\n  }\n  :global(.xxx-exit) {\n    opacity: 1;\n  }\n  :global(.xxx-hide-end) {\n    opacity: 0;\n  }\n\n  :global(.xxx-delay-show-start) {\n    opacity: 0;\n  }\n  :global(.xxx-delay-show-end) {\n    opacity: 1;\n    transition: opacity 750ms 250ms;\n  }\n  :global(.xxx-delay-exit) {\n    opacity: 1;\n  }\n  :global(.xxx-delay-hide-end) {\n    opacity: 0;\n    transition: opacity 750ms 250ms;\n  }\n\n  :global(.xxx-timings) {\n    transition-duration: 500ms;\n    transition-delay: 0;\n  }\n  :global(.xxx-timings-show-start) {\n    opacity: 0;\n    transition-duration: 500ms;\n    transition-delay: 0;\n  }\n  :global(.xxx-timings-show-end) {\n    opacity: 1;\n  }\n  :global(.xxx-timings-hide-end) {\n    opacity: 0;\n  }\n</style>\n\n<button on:click={() => notification.hideAll({ hideDelay: 0, hideDuration: .25 })}>Hide notifications</button>\n\n<button on:click={() => notification.resetAll().catch(() => {})}>Reset notifications</button>\n\n<button on:click={() => dialog.hideAll(hideAllOptions)}>Hide dialogs</button>\n\n<button on:click={() => dialog.resetAll().catch(() => {})}>Reset dialogs</button>\n\n<hr />\n\n<button on:click={() => showDialogs = !showDialogs}>Toggle dialogs</button>\n\n{#if showDialogs}\n\n<h2>Dialog</h2>\n\n<p>Dialog count = {$dialogCount} </p>\n\n<hr />\n\n<div>\n  <button\n    on:click={() => dialog.show({\n      title: \"Default\",\n      dialogic: {\n        component: DefaultContent,\n        className: \"xxx\",\n      },\n    })}>\n    Default\n  </button>\n  <button on:click={() => dialog.hide()}>Hide</button>\n</div>\n\n<div>\n\n  {#if $timerDialogExists}\n    <Remaining getRemainingFn={() => dialog.getRemaining({\n      id: \"timer\"\n    })} />\n  {/if}\n\n  <button\n    on:click={() => dialog.show(\n      {\n        dialogic: {\n          timeout: 2000,\n          component: DefaultContent,\n          id: \"timer\"\n        },\n        title: \"With timer\",\n      })}>\n    With timer\n  </button>\n  <button on:click={() => dialog.pause(\n      {\n        id: \"timer\"\n      }\n    )}>Pause</button>\n  <button on:click={() => dialog.resume(\n    {\n      id: \"timer\",\n      minimumDuration: 2000\n    }\n  )}>Resume</button>\n  <button on:click={() => dialog.hide({ id: \"timer\" }).catch(() => console.log(\"caught\"))}>Hide</button>\n</div>\n\n<div>\n  <button\n    on:click={() => dialog.show(\n      {\n        dialogic: {\n          didShow: item => console.log(\"didShow\", item),\n          didHide: item => console.log(\"didHide\", item),\n          styles: {\n            startEnd: {\n              transitionDuration: \"500ms\",\n            },\n            hideEnd: {\n              transitionDuration: \"250ms\",\n            },\n          },\n          component: DefaultContent,\n          className: \"xxx\",\n          id: \"withPromise\"\n        },\n        title: \"With Promise\"\n      }\n    ).then(item => console.log(\"dialog shown\", item))}>\n    Show with promises\n  </button>\n  <button on:click={() => dialog.hide(\n    {\n      id: \"withPromise\"\n    }).then(item => console.log(\"dialog hidden\", item))}>Hide</button>\n</div>\n\n<div>\n  <button\n    on:click={() => dialog.show({\n      ...dialogDelayProps,\n      dialogic: {\n        ...dialogDelayProps.dialogic,\n        id: dialogOneProps.id\n      },\n      title: dialogOneProps.title + \" \" + getRandomId()\n    })}>\n    Show delay\n  </button>\n  <button on:click={() => dialog.hide({ id: dialogOneProps.id })}>Hide</button>\n</div>\n<div>\n  <button\n    on:click={() => dialog.show({\n      ...dialogSlowFadeProps,\n      dialogic: {\n        ...dialogSlowFadeProps.dialogic,\n        id: dialogSlowFadeProps.id\n      }})}>\n    Show slow fade\n  </button>\n  <button on:click={() => dialog.hide({ id: dialogSlowFadeProps.id })}>Hide</button>\n</div>\n<div>\n  <button\n    on:click={() => dialog.show({\n      ...dialogFourProps,\n      dialogic: {\n        ...dialogFourProps.dialogic,\n        id: dialogFourProps.id\n      }\n    })}>\n    Show transition\n  </button>\n  <button on:click={() => dialog.hide({ id: dialogFourProps.id })}>Hide</button>\n</div>\n<div>\n  <button\n    on:click={() => dialog.show({\n      dialogic: {\n        component: DefaultContent,\n        spawn: \"special\"\n      },\n      title: \"Custom spawn\"\n    })}>\n    Show default in spawn\n  </button>\n  <button on:click={() => dialog.hide({ spawn: \"special\" })}>Hide</button>\n</div>\n\n<hr />\n\n<div>\n  <p>Dialog:</p>\n  <Dialog />\n</div>\n\n<div>\n  <p>Dialog with spawn:</p>\n  <Dialog spawn=\"special\" />\n</div>\n\n<hr />\nQueued dialog\n<div>\n  <button\n    on:click={() => dialog.show({\n      dialogic: {\n        component: DefaultContent,\n        spawn: \"Q\",\n        queued: true\n      },\n      title: \"Queued \" + Math.round(1000 * Math.random())\n    })}>\n    Queued\n  </button>\n  <button on:click={() => dialog.hide({ spawn: \"Q\" })}>Hide</button>\n</div>\n\n<div>\n  <p>Dialog queued:</p>\n  <Dialog spawn=\"Q\" />\n</div>\n\n<hr />\nInitially shown dialog\n<div>\n  <button\n    on:click={() => showInitial()}>\n    Initially shown\n  </button>\n  <button on:click={() => dialog.hide({ spawn: \"initial\" })}>Hide</button>\n</div>\n\n<div>\n  <Dialog spawn=\"initial\" onMount={\n    () => showInitial({ isOnMount: true })\n  } />\n</div>\n\n{/if}\n\n<hr />\n\n<button on:click={() => showNotifications = !showNotifications}>Toggle notifications</button>\n\n{#if showNotifications}\n\n<h2>Notification</h2>\n<p>Notification count: {$notificationCount} </p>\n<p>Notification exists: {$notificationExists} </p>\n<p>Is paused: {$notificationItemIsPaused} </p>\n\n<div>\n  <button\n    on:click={() => {\n      const title = \"N \" + getRandomId();\n      notification.show(\n        {\n          dialogic: {\n            didShow: item => console.log(\"didShow\", item, title),\n            didHide: item => console.log(\"didHide\", item, title),\n            component: DefaultContent,\n            className: \"xxx-timings\",\n            spawn: \"NO\"\n          },\n          className: \"xxx-timings-content\",\n          title\n        }\n      ).then(item => console.log(\"notification shown\", item, title))}\n    }\n    >\n    Queued\n  </button>\n  <button on:click={e => (\n    notification.hide(\n      {\n        spawn: \"NO\"\n      }\n    )).then(item => console.log(\"notification hidden from App\", item))}>Hide</button>\n  <button on:click={() => notification.pause(\n      {\n        spawn: \"NO\"\n      }\n    )}>Pause</button>\n  <button on:click={() => notification.resume(\n    {\n      spawn: \"NO\"\n    }\n  )}>Resume</button>\n</div>\n\n<Notification spawn=\"NO\" />\n\n<hr />\n\n{/if}\n\n"
  ],
  "names": [],
  "mappings": "AAiJU,IAAI,AAAE,CAAC,AACb,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,OAAO,CAAC,KAAK,AAC3B,CAAC,AACO,eAAe,AAAE,CAAC,AACxB,OAAO,CAAE,CAAC,AACZ,CAAC,AACO,aAAa,AAAE,CAAC,AACtB,OAAO,CAAE,CAAC,AACZ,CAAC,AACO,SAAS,AAAE,CAAC,AAClB,OAAO,CAAE,CAAC,AACZ,CAAC,AACO,aAAa,AAAE,CAAC,AACtB,OAAO,CAAE,CAAC,AACZ,CAAC,AAEO,qBAAqB,AAAE,CAAC,AAC9B,OAAO,CAAE,CAAC,AACZ,CAAC,AACO,mBAAmB,AAAE,CAAC,AAC5B,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,OAAO,CAAC,KAAK,CAAC,KAAK,AACjC,CAAC,AACO,eAAe,AAAE,CAAC,AACxB,OAAO,CAAE,CAAC,AACZ,CAAC,AACO,mBAAmB,AAAE,CAAC,AAC5B,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,OAAO,CAAC,KAAK,CAAC,KAAK,AACjC,CAAC,AAEO,YAAY,AAAE,CAAC,AACrB,mBAAmB,CAAE,KAAK,CAC1B,gBAAgB,CAAE,CAAC,AACrB,CAAC,AACO,uBAAuB,AAAE,CAAC,AAChC,OAAO,CAAE,CAAC,CACV,mBAAmB,CAAE,KAAK,CAC1B,gBAAgB,CAAE,CAAC,AACrB,CAAC,AACO,qBAAqB,AAAE,CAAC,AAC9B,OAAO,CAAE,CAAC,AACZ,CAAC,AACO,qBAAqB,AAAE,CAAC,AAC9B,OAAO,CAAE,CAAC,AACZ,CAAC"
}