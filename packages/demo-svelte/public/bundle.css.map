{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { Notification, notification, Dialog, dialog } from \"dialogic-svelte\";\n  import DefaultContent from \"./default/Content.svelte\";\n  import IntervalContent from \"./interval/Content.svelte\";\n  import Remaining from \"./remaining/Remaining.svelte\";\n\n  const dialogCount = dialog.getCount();\n  const timerDialogExists = dialog.exists({\n    id: \"timer\"\n  });\n\n  const notificationCount = notification.getCount({\n    spawn: \"NO\"\n  });\n\n  const notificationItemIsPaused = notification.isPaused({\n    spawn: \"NO\"\n  });\n  const notificationExists = notification.exists({\n    spawn: \"NO\"\n  });\n\n  const getRandomId = () => Math.round(1000 * Math.random()).toString();\n\n  const showInitial = ({ isOnMount } = {}) => dialog.show(\n  {\n    title: getRandomId(),\n    component: DefaultContent,\n    showDuration: isOnMount\n      ? 0\n      : .5,\n    hideDuration: 0.5,\n    className: \"xxx-content\",\n    transitionClassName: \"xxx\",\n  },\n  {\n    spawn: \"initial\",\n  }\n);\n\n  $: showDialogs = true;\n  $: showNotifications = false;\n\n  const dialogOneProps = {\n    showDuration: 0.5,\n    showDelay: 0.25,\n    hideDuration: 0.5,\n    hideDelay: .25,\n    component: IntervalContent,\n    className: \"xxx-content\",\n    transitionClassName: \"xxx\",\n    title: \"Clock\",\n    id: getRandomId()\n  };\n  const dialogSlowFadeProps = {\n    showDuration: 1,\n    showDelay: 0,\n    hideDuration: 1,\n    hideDelay: 0,\n    component: DefaultContent,\n    className: \"xxx-content\",\n    transitionClassName: \"xxx\",\n    title: \"Fade\",\n    id: getRandomId()\n  };\n  const dialogFourProps = {\n    transitions: {\n      show: domElement => {\n        return {\n          duration: 0.5,\n          before: () => (\n            (domElement.style.opacity = 0),\n            (domElement.style.transform = \"translate3d(0, 20px, 0)\")\n          ),\n          transition: () => (\n            (domElement.style.opacity = 1),\n            (domElement.style.transform = \"translate3d(0, 0px,  0)\")\n          )\n        };\n      },\n      hide: domElement => {\n        return { duration: 0.5, transition: () => domElement.style.opacity = 0 };\n      },\n    },\n    component: DefaultContent,\n    title: \"Transitions\",\n    id: getRandomId()\n  };\n\n  const clearOptions = {\n    transitions: {\n      hide: domElement => {\n        return { duration: 0.5, delay: 0, transition: () => domElement.style.opacity = 0 };\n      }\n    }\n  };\n</script>\n\n<style>\n  :global(.xxx) {\n    opacity: 0;\n  }\n  :global(.xxx-enter) {\n    opacity: 0;\n  }\n  :global(.xxx-enter-active) {\n    opacity: 1;\n  }\n  :global(.xxx-exit) {\n    opacity: 1;\n  }\n  :global(.xxx-exit-active) {\n    opacity: 0;\n  }\n  :global(.xxx-timings) {\n    opacity: 0;\n    transition-duration: 500ms;\n    transition-delay: 0;\n  }\n  :global(.xxx-visible-timings) {\n    opacity: 1;\n  }\n</style>\n\n<button on:click={() => notification.hideAll({ hideDelay: 0, hideDuration: .25 })}>Hide notifications</button>\n\n<button on:click={() => notification.resetAll().catch(() => {})}>Reset notifications</button>\n\n<button on:click={() => dialog.hideAll(clearOptions)}>Hide dialogs</button>\n\n<button on:click={() => dialog.resetAll().catch(() => {})}>Reset dialogs</button>\n\n<hr />\n\n<button on:click={() => showDialogs = !showDialogs}>Toggle dialogs</button>\n\n{#if showDialogs}\n\n<h2>Dialog</h2>\n\n<p>Dialog count = {$dialogCount} </p>\n\n<hr />\n\n<div>\n  <button\n    on:click={() => dialog.show({\n      component: DefaultContent,\n      title: \"Default\",\n      transitionClassName: \"xxx\",\n      showDuration: .5,\n      hideDuration: .5,\n    })}>\n    Default\n  </button>\n  <button on:click={() => dialog.hide()}>Hide</button>\n</div>\n\n<div>\n\n  {#if $timerDialogExists}\n    <Remaining getRemainingFn={() => dialog.getRemaining({\n      id: \"timer\"\n    })} />\n  {/if}\n\n  <button\n    on:click={() => dialog.show(\n      {\n        timeout: 2000,\n        component: DefaultContent,\n        title: \"With timer\",\n      },\n      {\n        id: \"timer\"\n      })}>\n    With timer\n  </button>\n  <button on:click={() => dialog.pause(\n      {\n        id: \"timer\"\n      }\n    )}>Pause</button>\n  <button on:click={() => dialog.resume(\n    {\n      id: \"timer\"\n    },\n    {\n      minimumDuration: 2000\n    }\n  )}>Resume</button>\n  <button on:click={() => dialog.hide({ id: \"timer\" }).catch(() => console.log(\"caught\"))}>Hide</button>\n</div>\n\n<div>\n  <button\n    on:click={() => dialog.show(\n      {\n        didShow: item => console.log(\"didShow\", item),\n        didHide: item => console.log(\"didHide\", item),\n        showDuration: 0.5,\n        showDelay: 0.25,\n        component: DefaultContent,\n        transitionClassName: \"xxx\",\n        title: \"With Promise\"\n      },\n      {\n        id: \"withPromise\"\n      }\n    ).then(item => console.log(\"dialog shown\", item))}>\n    Show with promises\n  </button>\n  <button on:click={() => dialog.hide(\n    {\n      id: \"withPromise\"\n    }).then(item => console.log(\"dialog hidden\", item))}>Hide</button>\n</div>\n\n<div>\n  <button\n    on:click={() => dialog.show({\n      ...dialogOneProps,\n      showDelay: .5,\n      showDuration: .5,\n      hideDelay: 0,\n      hideDuration: .5,\n      title: dialogOneProps.title + \" \" + getRandomId()\n    }, { id: dialogOneProps.id })}>\n    Show delay\n  </button>\n  <button on:click={() => dialog.hide({ id: dialogOneProps.id })}>Hide</button>\n</div>\n<div>\n  <button\n    on:click={() => dialog.show(dialogSlowFadeProps, { id: dialogSlowFadeProps.id })}>\n    Show slow fade\n  </button>\n  <button on:click={() => dialog.hide({ id: dialogSlowFadeProps.id })}>Hide</button>\n</div>\n<div>\n  <button\n    on:click={() => dialog.show(dialogFourProps, { id: dialogFourProps.id })}>\n    Show transition\n  </button>\n  <button on:click={() => dialog.hide({ id: dialogFourProps.id })}>Hide</button>\n</div>\n<div>\n  <button\n    on:click={() => dialog.show({\n      component: DefaultContent,\n      title: \"Custom spawn\"\n    }, { spawn: \"special\" })}>\n    Show default in spawn\n  </button>\n  <button on:click={() => dialog.hide({ spawn: \"special\" })}>Hide</button>\n</div>\n\n<hr />\n\n<div>\n  <p>Dialog:</p>\n  <Dialog />\n</div>\n\n<div>\n  <p>Dialog with spawn:</p>\n  <Dialog spawn=\"special\" />\n</div>\n\n<hr />\nQueued dialog\n<div>\n  <button\n    on:click={() => dialog.show({\n      component: DefaultContent,\n      title: \"Queued \" + Math.round(1000 * Math.random())\n    }, { spawn: \"Q\", queued: true })}>\n    Queued\n  </button>\n  <button on:click={() => dialog.hide({ spawn: \"Q\" })}>Hide</button>\n</div>\n\n<div>\n  <p>Dialog queued:</p>\n  <Dialog spawn=\"Q\" />\n</div>\n\n<hr />\nInitially shown dialog\n<div>\n  <button\n    on:click={() => showInitial()}>\n    Initially shown\n  </button>\n  <button on:click={() => dialog.hide({ spawn: \"initial\" })}>Hide</button>\n</div>\n\n<div>\n  <Dialog spawn=\"initial\" onMount={\n    () => showInitial({ isOnMount: true })\n  } />\n</div>\n\n{/if}\n\n<hr />\n\n<button on:click={() => showNotifications = !showNotifications}>Toggle notifications</button>\n\n{#if showNotifications}\n\n<h2>Notification</h2>\n<p>Notification count: {$notificationCount} </p>\n<p>Notification exists: {$notificationExists} </p>\n<p>Is paused: {$notificationItemIsPaused} </p>\n\n<div>\n  <button\n    on:click={() => {\n      const title = \"N \" + getRandomId();\n      notification.show(\n        {\n          didShow: item => console.log(\"didShow\", item, title),\n          didHide: item => console.log(\"didHide\", item, title),\n          component: DefaultContent,\n          className: \"xxx-timings\",\n          showClassName: \"xxx-visible-timings\",\n          title\n        },\n        {\n          spawn: \"NO\"\n        }\n      ).then(item => console.log(\"notification shown\", item, title))}\n    }\n    >\n    Queued\n  </button>\n  <button on:click={e => (\n    notification.hide(\n      {\n        spawn: \"NO\"\n      }\n    )).then(item => console.log(\"notification hidden from App\", item))}>Hide</button>\n  <button on:click={() => notification.pause(\n      {\n        spawn: \"NO\"\n      }\n    )}>Pause</button>\n  <button on:click={() => notification.resume(\n    {\n      spawn: \"NO\"\n    }\n  )}>Resume</button>\n</div>\n\n<Notification spawn=\"NO\" />\n\n<hr />\n\n{/if}\n\n"
  ],
  "names": [],
  "mappings": "AAmGU,IAAI,AAAE,CAAC,AACb,OAAO,CAAE,CAAC,AACZ,CAAC,AACO,UAAU,AAAE,CAAC,AACnB,OAAO,CAAE,CAAC,AACZ,CAAC,AACO,iBAAiB,AAAE,CAAC,AAC1B,OAAO,CAAE,CAAC,AACZ,CAAC,AACO,SAAS,AAAE,CAAC,AAClB,OAAO,CAAE,CAAC,AACZ,CAAC,AACO,gBAAgB,AAAE,CAAC,AACzB,OAAO,CAAE,CAAC,AACZ,CAAC,AACO,YAAY,AAAE,CAAC,AACrB,OAAO,CAAE,CAAC,CACV,mBAAmB,CAAE,KAAK,CAC1B,gBAAgB,CAAE,CAAC,AACrB,CAAC,AACO,oBAAoB,AAAE,CAAC,AAC7B,OAAO,CAAE,CAAC,AACZ,CAAC"
}