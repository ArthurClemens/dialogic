{"version":3,"file":"dialogic-hooks.js","sources":["../src/sharedUseDialogic.ts","../src/sharedUseRemaining.ts"],"sourcesContent":["/* eslint-disable import/no-unresolved */\nimport { Dialogic } from 'dialogic';\n\nimport type { DependencyList, TUseEffect, TUseState } from './types';\n\nexport type UseDialogicProps<T> = {\n  /**\n   * Condition when the instance should be shown.\n   */\n  isShow?: boolean;\n\n  /**\n   * For directed use only. Condition when the instance should be hidden.\n   */\n  isHide?: boolean;\n\n  /**\n   * Props to pass to the instance.\n   */\n  props?: Dialogic.Options<T>;\n\n  /**\n   * Reevaluates condition whenever one of the passed values changes.\n   */\n  deps?: DependencyList;\n\n  /**\n   * If true, no effects are run. Useful for conditionally disabling the hook.\n   */\n  isIgnore?: boolean;\n};\n\nexport type UseDialogicInstanceProps<T> = UseDialogicProps<T> & {\n  /**\n   * Instance to show.\n   */\n  instance: Dialogic.DialogicInstance;\n};\n\nlet useDialogicCounter = 0;\n\ntype SharedUseDialogicProps = {\n  useEffect: TUseEffect;\n  useState: TUseState;\n};\n\nexport const sharedUseDialogic = ({\n  useEffect,\n  useState,\n}: SharedUseDialogicProps) => <T>(allProps: UseDialogicInstanceProps<T>) => {\n  const {\n    isIgnore,\n    isShow,\n    isHide,\n    instance,\n    deps = [],\n    props = {} as T & Dialogic.Options<T>,\n  } = allProps;\n\n  // Create an id if not set.\n  // This is useful for pages with multiple dialogs, where we can't expect\n  // to have the user set an explicit id for each.\n  // eslint-disable-next-line no-plusplus\n  const [id] = useState(useDialogicCounter++);\n  const augProps = {\n    ...props,\n    ...(props.dialogic\n      ? {\n          dialogic: {\n            ...props.dialogic,\n            id: props.dialogic.id || id,\n          },\n        }\n      : {\n          dialogic: {\n            id,\n          },\n        }),\n  };\n\n  const showInstance = () => {\n    instance.show<T>(augProps);\n  };\n\n  const hideInstance = () => {\n    instance.hide<T>(augProps);\n  };\n\n  // maybe show\n  useEffect(() => {\n    if (isIgnore) return;\n    if (isShow !== undefined) {\n      if (isShow) {\n        showInstance();\n      } else {\n        hideInstance();\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [...deps, isShow]);\n\n  // maybe hide\n  useEffect(() => {\n    if (isIgnore) return;\n    if (isHide !== undefined) {\n      if (isHide) {\n        hideInstance();\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [...deps, isHide]);\n\n  // unmount\n  useEffect(() => {\n    if (isIgnore) return;\n    // eslint-disable-next-line consistent-return\n    return () => {\n      hideInstance();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    show: showInstance,\n    hide: hideInstance,\n  };\n};\n\n/**\n * `useDialogic` with `instance` set to `dialog`.\n */\nexport const sharedUseDialog = ({\n  useEffect,\n  useState,\n  dialog,\n}: SharedUseDialogicProps & { dialog: Dialogic.DialogicInstance }) => <T>(\n  props: UseDialogicInstanceProps<T>,\n) =>\n  sharedUseDialogic({ useEffect, useState })<T>({\n    ...props,\n    instance: dialog,\n  });\n\n/**\n * `useDialogic` with `instance` set to `notification`.\n */\nexport const sharedUseNotification = ({\n  useEffect,\n  useState,\n  notification,\n}: SharedUseDialogicProps & { notification: Dialogic.DialogicInstance }) => <T>(\n  props: UseDialogicInstanceProps<T>,\n) =>\n  sharedUseDialogic({ useEffect, useState })<T>({\n    ...props,\n    instance: notification,\n  });\n","import { Dialogic, remaining } from 'dialogic';\n\nimport type { TUseMemo, TUseState } from './types';\n\ntype SharedUseRemainingProps = {\n  useMemo: TUseMemo;\n  useState: TUseState;\n};\n\ntype UseRemainingProps = {\n  instance: Dialogic.DialogicInstance;\n  id?: string;\n  spawn?: string;\n  roundToSeconds?: boolean;\n};\n\nexport const sharedUseRemaining = ({\n  useState,\n  useMemo,\n}: SharedUseRemainingProps) => (props: UseRemainingProps) => {\n  const [value, setValue] = useState<number | undefined>(undefined);\n  const identity = {\n    id: props.id,\n    spawn: props.spawn,\n  };\n  const exists = !!props.instance.exists(identity);\n  useMemo(() => {\n    if (exists) {\n      remaining({\n        ...identity,\n        instance: props.instance,\n        roundToSeconds: props.roundToSeconds,\n        callback: newValue => {\n          setValue(newValue);\n        },\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [exists]);\n\n  return [value];\n};\n"],"names":["useDialogicCounter","sharedUseDialogic","useEffect","useState","allProps","isIgnore","isShow","isHide","instance","deps","props","id","augProps","dialogic","showInstance","show","hideInstance","hide","undefined","dialog","notification","useMemo","value","setValue","identity","spawn","exists","remaining","roundToSeconds","callback","newValue"],"mappings":"iSAuCA,IAAIA,EAAqB,QAOZC,EAAoB,EAC/BC,UAAAA,EACAC,SAAAA,KACgCC,IAChC,MAAMC,SACJA,EAAQC,OACRA,EAAMC,OACNA,EAAMC,SACNA,EAAQC,KACRA,EAAO,GAAEC,MACTA,EAAQ,IACNN,GAMGO,GAAMR,EAASH,KAChBY,iCACDF,GACCA,EAAMG,SACN,CACEA,wCACKH,EAAMG,WACTF,GAAID,EAAMG,SAASF,IAAMA,KAG7B,CACEE,SAAU,CACRF,GAAAA,KAKJG,EAAe,KACnBN,EAASO,KAAQH,IAGbI,EAAe,KACnBR,EAASS,KAAQL,IAqCnB,OAjCAV,EAAU,KACJG,QACWa,IAAXZ,IACEA,EACFQ,IAEAE,MAIH,IAAIP,EAAMH,IAGbJ,EAAU,KACJG,QACWa,IAAXX,GACEA,GACFS,KAIH,IAAIP,EAAMF,IAGbL,EAAU,KACR,IAAIG,EAEJ,MAAO,KACLW,MAGD,IAEI,CACLD,KAAMD,EACNG,KAAMD,sBAOqB,EAC7Bd,UAAAA,EACAC,SAAAA,EACAgB,OAAAA,KAEAT,GAEAT,EAAkB,CAAEC,UAAAA,EAAWC,SAAAA,GAA/BF,gCACKS,IACHF,SAAUW,mDAMuB,EACnCjB,UAAAA,EACAC,SAAAA,EACAiB,aAAAA,KAEAV,GAEAT,EAAkB,CAAEC,UAAAA,EAAWC,SAAAA,GAA/BF,gCACKS,IACHF,SAAUY,0BC3IoB,EAChCjB,SAAAA,EACAkB,QAAAA,KAC8BX,IAC9B,MAAOY,EAAOC,GAAYpB,OAA6Be,GACjDM,EAAW,CACfb,GAAID,EAAMC,GACVc,MAAOf,EAAMe,OAETC,IAAWhB,EAAMF,SAASkB,OAAOF,GAevC,OAdAH,EAAQ,KACFK,GACFC,2CACKH,IACHhB,SAAUE,EAAMF,SAChBoB,eAAgBlB,EAAMkB,eACtBC,SAAUC,IACRP,EAASO,QAKd,CAACJ,IAEG,CAACJ"}