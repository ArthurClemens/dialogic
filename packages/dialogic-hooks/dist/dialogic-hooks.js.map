{"version":3,"file":"dialogic-hooks.js","sources":["../src/useDialogic.ts","../src/useRemaining.ts"],"sourcesContent":["/* eslint-disable import/no-unresolved */\nimport { Dialogic } from 'dialogic';\n\nimport type { UseDialogicInstanceProps, UseDialogicSharedProps } from './types';\n\nlet useDialogicCounter = 0;\n\nexport const useDialogicShared = <T>({\n  useEffect,\n  useState,\n  isIgnore,\n  isShow,\n  isHide,\n  instance,\n  deps = [],\n  props = {} as T & Dialogic.Options<T>,\n}: UseDialogicSharedProps & UseDialogicInstanceProps<T>) => {\n  // Create an id if not set.\n  // This is useful for pages with multiple dialogs, where we can't expect\n  // to have the user set an explicit id for each.\n  // eslint-disable-next-line no-plusplus\n  const [id] = useState(useDialogicCounter++);\n  const augProps = {\n    ...props,\n    ...(props.dialogic\n      ? {\n          dialogic: {\n            ...props.dialogic,\n            id: props.dialogic.id || id,\n          },\n        }\n      : {\n          dialogic: {\n            id,\n          },\n        }),\n  };\n\n  const showInstance = () => {\n    instance.show<T>(augProps);\n  };\n\n  const hideInstance = () => {\n    instance.hide<T>(augProps);\n  };\n\n  // maybe show\n  useEffect(() => {\n    if (isIgnore) return;\n    if (isShow !== undefined) {\n      if (isShow) {\n        showInstance();\n      } else {\n        hideInstance();\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [...deps, isShow]);\n\n  // maybe hide\n  useEffect(() => {\n    if (isIgnore) return;\n    if (isHide !== undefined) {\n      if (isHide) {\n        hideInstance();\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [...deps, isHide]);\n\n  // unmount\n  useEffect(() => {\n    if (isIgnore) return;\n    // eslint-disable-next-line consistent-return\n    return () => {\n      hideInstance();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    show: showInstance,\n    hide: hideInstance,\n  };\n};\n","import { remaining } from 'dialogic';\n\nimport type { SharedUseRemainingProps, UseRemainingProps } from './types';\n\nexport const useRemainingShared = ({\n  useState,\n  useMemo,\n  instance,\n  id,\n  spawn,\n  roundToSeconds,\n}: SharedUseRemainingProps & UseRemainingProps) => {\n  const [value, setValue] = useState<number | undefined>(undefined);\n  const identity = {\n    id,\n    spawn,\n  };\n  const exists = !!instance.exists(identity);\n  useMemo(() => {\n    if (exists) {\n      remaining({\n        ...identity,\n        instance,\n        roundToSeconds,\n        callback: newValue => {\n          setValue(newValue);\n        },\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [exists]);\n\n  return [value];\n};\n"],"names":["useDialogicCounter","useEffect","useState","isIgnore","isShow","isHide","instance","deps","props","id","augProps","dialogic","showInstance","show","hideInstance","hide","undefined","useMemo","spawn","roundToSeconds","value","setValue","identity","exists","remaining","callback","newValue"],"mappings":"iSAKA,IAAIA,EAAqB,sBAEQ,EAC/BC,UAAAA,EACAC,SAAAA,EACAC,SAAAA,EACAC,OAAAA,EACAC,OAAAA,EACAC,SAAAA,EACAC,KAAAA,EAAO,GACPC,MAAAA,EAAQ,OAMR,MAAOC,GAAMP,EAASF,KAChBU,iCACDF,GACCA,EAAMG,SACN,CACEA,wCACKH,EAAMG,WACTF,GAAID,EAAMG,SAASF,IAAMA,KAG7B,CACEE,SAAU,CACRF,GAAAA,KAKJG,EAAe,KACnBN,EAASO,KAAQH,IAGbI,EAAe,KACnBR,EAASS,KAAQL,IAqCnB,OAjCAT,EAAU,KACJE,QACWa,IAAXZ,IACEA,EACFQ,IAEAE,MAIH,IAAIP,EAAMH,IAGbH,EAAU,KACJE,QACWa,IAAXX,GACEA,GACFS,KAIH,IAAIP,EAAMF,IAGbJ,EAAU,KACR,IAAIE,EAEJ,MAAO,KACLW,MAGD,IAEI,CACLD,KAAMD,EACNG,KAAMD,yBC9EwB,EAChCZ,SAAAA,EACAe,QAAAA,EACAX,SAAAA,EACAG,GAAAA,EACAS,MAAAA,EACAC,eAAAA,MAEA,MAAOC,EAAOC,GAAYnB,OAA6Bc,GACjDM,EAAW,CACfb,GAAAA,EACAS,MAAAA,GAEIK,IAAWjB,EAASiB,OAAOD,GAejC,OAdAL,EAAQ,KACFM,GACFC,2CACKF,IACHhB,SAAAA,EACAa,eAAAA,EACAM,SAAUC,IACRL,EAASK,QAKd,CAACH,IAEG,CAACH"}