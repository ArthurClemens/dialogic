{"version":3,"file":"dialogic-mithril.js","sources":["../src/instanceEvents.ts","../src/Instance.ts","../src/Wrapper.ts","../src/Dialogical.ts","../src/useDialogic.ts","../src/useRemaining.ts","../src/index.ts"],"sourcesContent":["import {\n  showItem,\n  hideItem,\n  selectors,\n  setDomElement,\n  Dialogic,\n} from 'dialogic';\n\nexport const handleDispatch = (ns: string) => (\n  event: Dialogic.InstanceEvent,\n  fn: Dialogic.InitiateItemTransitionFn,\n) => {\n  // Update dispatching item:\n  const maybeItem: Dialogic.MaybeItem<unknown> = selectors.find(\n    ns,\n    event.detail.identityOptions,\n  );\n  if (maybeItem.just) {\n    setDomElement(event.detail.domElement, maybeItem.just);\n  }\n  // Find item to transition:\n  const maybeTransitioningItem: Dialogic.MaybeItem<unknown> = selectors.find(\n    ns,\n    event.detail.identityOptions,\n  );\n  if (maybeTransitioningItem.just) {\n    fn(maybeTransitioningItem.just);\n  }\n};\n\nexport const onInstanceMounted = (ns: string) => (\n  event: Dialogic.InstanceEvent,\n) => handleDispatch(ns)(event, showItem);\n\nexport const onShowInstance = (ns: string) => (event: Dialogic.InstanceEvent) =>\n  handleDispatch(ns)(event, showItem);\n\nexport const onHideInstance = (ns: string) => (event: Dialogic.InstanceEvent) =>\n  handleDispatch(ns)(event, hideItem);\n","import m, { Component, ClosureComponent } from 'mithril';\nimport { Dialogic } from 'dialogic';\n\nexport const Instance: ClosureComponent<Dialogic.DialogicalInstanceOptions<\n  Dialogic.PassThroughOptions\n>> = ({ attrs: componentAttrs }) => {\n  let domElement: HTMLElement;\n\n  const dispatchTransition = (\n    dispatchFn: Dialogic.DialogicalInstanceDispatchFn,\n  ) => {\n    dispatchFn({\n      detail: {\n        identityOptions: componentAttrs.identityOptions,\n        domElement,\n      },\n    });\n  };\n\n  const onMount = () => {\n    dispatchTransition(componentAttrs.onMount);\n  };\n\n  const show = () => {\n    dispatchTransition(componentAttrs.onShow);\n  };\n\n  const hide = () => {\n    dispatchTransition(componentAttrs.onHide);\n  };\n\n  return {\n    oncreate: (vnode: { dom: Element }) => {\n      domElement = vnode.dom as HTMLElement;\n      onMount();\n    },\n    view: ({ attrs }) => {\n      const component = attrs.dialogicOptions.component as Component<\n        Dialogic.PassThroughOptions\n      >;\n      if (!component) {\n        throw 'Component missing in dialogic options.';\n      }\n      return m(\n        'div',\n        { className: attrs.dialogicOptions.className },\n        m(component, {\n          ...attrs.passThroughOptions,\n          show,\n          hide,\n        }),\n      );\n    },\n  };\n};\n","import m, { Component } from 'mithril';\nimport { filterCandidates, selectors, Dialogic } from 'dialogic';\nimport {\n  onInstanceMounted,\n  onShowInstance,\n  onHideInstance,\n} from './instanceEvents';\nimport { Instance } from './Instance';\n\ninterface Wrapper extends Dialogic.DialogicalWrapperOptions {}\n\nexport const Wrapper: Component<Dialogic.DialogicalWrapperOptions> = {\n  view: ({ attrs }) => {\n    const nsOnInstanceMounted = onInstanceMounted(attrs.ns);\n    const nsOnShowInstance = onShowInstance(attrs.ns);\n    const nsOnHideInstance = onHideInstance(attrs.ns);\n\n    const identityOptions: Dialogic.IdentityOptions =\n      attrs.identityOptions || ({} as Dialogic.IdentityOptions);\n    const filtered = filterCandidates(\n      attrs.ns,\n      selectors.getStore(),\n      identityOptions,\n    );\n\n    return filtered.map(item =>\n      m(Instance, {\n        key: item.key,\n        identityOptions: item.identityOptions,\n        dialogicOptions: item.dialogicOptions as Dialogic.DialogicOptions<\n          Dialogic.PassThroughOptions\n        >,\n        passThroughOptions: item.passThroughOptions as Dialogic.PassThroughOptions,\n        onMount: nsOnInstanceMounted,\n        onShow: nsOnShowInstance,\n        onHide: nsOnHideInstance,\n      }),\n    );\n  },\n};\n","import m, { Component } from 'mithril';\nimport { Dialogic } from 'dialogic';\nimport { Wrapper } from './Wrapper';\n\ntype DialogicalFn = (\n  type: Dialogic.DialogicInstance,\n) => Component<Dialogic.ComponentOptions>;\n\nexport const Dialogical: DialogicalFn = instance => ({\n  oncreate: ({ attrs }) => {\n    if (typeof attrs.onMount === 'function') {\n      attrs.onMount();\n    }\n  },\n  view: ({ attrs }) => {\n    const identityOptions = {\n      id: attrs.id || instance.defaultId,\n      spawn: attrs.spawn || instance.defaultSpawn,\n    };\n    return m(Wrapper, {\n      identityOptions,\n      ns: instance.ns,\n    });\n  },\n});\n","import { useEffect, useState } from 'mithril-hooks';\nimport { dialog, notification } from 'dialogic';\n\nimport {\n  sharedUseDialogic,\n  sharedUseDialog,\n  sharedUseNotification,\n} from 'dialogic-hooks';\n\nexport const useDialogic = sharedUseDialogic({ useEffect, useState });\nexport const useDialog = sharedUseDialog({ useEffect, useState, dialog });\nexport const useNotification = sharedUseNotification({\n  useEffect,\n  useState,\n  notification,\n});\n","import { useMemo, useState } from 'mithril-hooks';\n\nimport { sharedUseRemaining } from 'dialogic-hooks';\n\nexport const useRemaining = sharedUseRemaining({ useMemo, useState });\n","import m from 'mithril';\nimport { states } from 'dialogic';\nimport { dialog, notification } from 'dialogic';\nimport { Dialogical } from './Dialogical';\n\nconst Dialog = Dialogical(dialog);\nconst Notification = Dialogical(notification);\n\nexport { Dialogical, dialog, Dialog, notification, Notification };\nexport * from './useDialogic';\nexport * from './useRemaining';\n\nstates.map(\n  state => m.redraw(),\n  // console.log(JSON.stringify(state, null, 2))\n);\n"],"names":["handleDispatch","ns","event","fn","maybeItem","selectors","find","detail","identityOptions","just","setDomElement","domElement","maybeTransitioningItem","Instance","attrs","componentAttrs","dispatchTransition","dispatchFn","show","onShow","hide","onHide","oncreate","vnode","dom","onMount","view","component","dialogicOptions","m","className","passThroughOptions","Wrapper","nsOnInstanceMounted","showItem","nsOnShowInstance","onShowInstance","nsOnHideInstance","hideItem","onHideInstance","filterCandidates","getStore","map","item","key","Dialogical","instance","id","defaultId","spawn","defaultSpawn","useDialogic","sharedUseDialogic","useEffect","useState","useDialog","sharedUseDialog","dialog","useNotification","sharedUseNotification","notification","useRemaining","sharedUseRemaining","useMemo","Dialog","Notification","state","redraw"],"mappings":"ghBAQO,MAAMA,EAAkBC,GAAe,CAC5CC,EACAC,KAGA,MAAMC,EAAyCC,YAAUC,KACvDL,EACAC,EAAMK,OAAOC,iBAEXJ,EAAUK,MACZC,gBAAcR,EAAMK,OAAOI,WAAYP,EAAUK,MAGnD,MAAMG,EAAsDP,YAAUC,KACpEL,EACAC,EAAMK,OAAOC,iBAEXI,EAAuBH,MACzBN,EAAGS,EAAuBH,OCvBjBI,EAER,EAAGC,MAAOC,MACb,IAAIJ,EAEJ,MAAMK,EACJC,IAEAA,EAAW,CACTV,OAAQ,CACNC,gBAAiBO,EAAeP,gBAChCG,WAAAA,MASAO,EAAO,KACXF,EAAmBD,EAAeI,SAG9BC,EAAO,KACXJ,EAAmBD,EAAeM,SAGpC,MAAO,CACLC,SAAWC,IACTZ,EAAaY,EAAMC,IAbrBR,EAAmBD,EAAeU,UAgBlCC,KAAM,EAAGZ,MAAAA,MACP,MAAMa,EAAYb,EAAMc,gBAAgBD,UAGxC,IAAKA,EACH,KAAM,yCAER,OAAOE,UACL,MACA,CAAEC,UAAWhB,EAAMc,gBAAgBE,WACnCD,UAAEF,EAAW,IACRb,EAAMiB,mBACTb,KAAAA,EACAE,KAAAA,QCtCGY,EAAwD,CACnEN,KAAM,EAAGZ,MAAAA,MACP,MAAMmB,GFiBwBhC,EEjBgBa,EAAMb,GFkBtDC,GACGF,EAAeC,EAAfD,CAAmBE,EAAOgC,aAFE,IAACjC,EEhB9B,MAAMkC,EFoBoB,CAAClC,GAAgBC,GAC7CF,EAAeC,EAAfD,CAAmBE,EAAOgC,YErBCE,CAAetB,EAAMb,IACxCoC,EFsBoB,CAACpC,GAAgBC,GAC7CF,EAAeC,EAAfD,CAAmBE,EAAOoC,YEvBCC,CAAezB,EAAMb,IAExCO,EACJM,EAAMN,iBAAoB,GAO5B,OANiBgC,mBACf1B,EAAMb,GACNI,YAAUoC,WACVjC,GAGckC,IAAIC,GAClBd,UAAEhB,EAAU,CACV+B,IAAKD,EAAKC,IACVpC,gBAAiBmC,EAAKnC,gBACtBoB,gBAAiBe,EAAKf,gBAGtBG,mBAAoBY,EAAKZ,mBACzBN,QAASQ,EACTd,OAAQgB,EACRd,OAAQgB,OC3BHQ,EAA2BC,KACtCxB,SAAU,EAAGR,MAAAA,MACkB,mBAAlBA,EAAMW,SACfX,EAAMW,WAGVC,KAAM,EAAGZ,MAAAA,MACP,MAAMN,EAAkB,CACtBuC,GAAIjC,EAAMiC,IAAMD,EAASE,UACzBC,MAAOnC,EAAMmC,OAASH,EAASI,cAEjC,OAAOrB,UAAEG,EAAS,CAChBxB,gBAAAA,EACAP,GAAI6C,EAAS7C,QCZNkD,EAAcC,oBAAkB,WAAEC,qBAAWC,aAC7CC,EAAYC,kBAAgB,WAAEH,qBAAWC,kBAAUG,WACnDC,EAAkBC,wBAAsB,WACnDN,qBACAC,wBACAM,iBCVWC,EAAeC,qBAAmB,SAAEC,mBAAST,aCCpDU,EAASnB,EAAWY,UACpBQ,EAAepB,EAAWe,yBAMzBlB,IACLwB,GAASrC,UAAEsC"}