{"version":3,"file":"dialogic-mithril.js","sources":["../src/Instance.ts","../src/instanceEvents.ts","../src/Wrapper.ts","../src/Dialogical.ts","../src/useDialogic.ts","../src/useRemaining.ts","../src/index.ts"],"sourcesContent":["import { Dialogic } from 'dialogic';\nimport m, { ClosureComponent, Component } from 'mithril';\n\ntype ComponentProps = Dialogic.PassThroughOptions & {\n  show: () => void;\n  hide: () => void;\n};\n\nexport const Instance: ClosureComponent<\n  Dialogic.DialogicalInstanceOptions<Dialogic.PassThroughOptions>\n> = ({ attrs: componentAttrs }) => {\n  let domElement: HTMLElement;\n\n  const dispatchTransition = (\n    dispatchFn: Dialogic.DialogicalInstanceDispatchFn,\n  ) => {\n    dispatchFn({\n      detail: {\n        identityOptions: componentAttrs.identityOptions,\n        domElement,\n      },\n    });\n  };\n\n  const onMount = () => {\n    dispatchTransition(componentAttrs.onMount);\n  };\n\n  const show = () => {\n    dispatchTransition(componentAttrs.onShow);\n  };\n\n  const hide = () => {\n    dispatchTransition(componentAttrs.onHide);\n  };\n\n  return {\n    oncreate: (vnode: { dom: Element }) => {\n      domElement = vnode.dom as HTMLElement;\n      onMount();\n    },\n    view: ({ attrs }) => {\n      const component = attrs.dialogicOptions\n        .component as Component<ComponentProps>;\n      if (!component) {\n        throw new Error('Component missing in dialogic options.');\n      }\n      const passThroughOptions = (attrs.passThroughOptions as {}) || {};\n      return m(\n        'div',\n        { className: attrs.dialogicOptions.className },\n        m(component, {\n          ...passThroughOptions,\n          show,\n          hide,\n        }),\n      );\n    },\n  };\n};\n","import {\n  Dialogic,\n  hideItem,\n  selectors,\n  setDomElement,\n  showItem,\n} from 'dialogic';\n\nexport const handleDispatch = (ns: string) => (\n  event: Dialogic.InstanceEvent,\n  fn: Dialogic.InitiateItemTransitionFn,\n) => {\n  // Update dispatching item:\n  const maybeItem: Dialogic.MaybeItem<unknown> = selectors.find(\n    ns,\n    event.detail.identityOptions,\n  );\n  if (maybeItem.just) {\n    setDomElement(event.detail.domElement, maybeItem.just);\n  }\n  // Find item to transition:\n  const maybeTransitioningItem: Dialogic.MaybeItem<unknown> = selectors.find(\n    ns,\n    event.detail.identityOptions,\n  );\n  if (maybeTransitioningItem.just) {\n    fn(maybeTransitioningItem.just);\n  }\n};\n\nexport const onInstanceMounted = (ns: string) => (\n  event: Dialogic.InstanceEvent,\n) => handleDispatch(ns)(event, showItem);\n\nexport const onShowInstance = (ns: string) => (event: Dialogic.InstanceEvent) =>\n  handleDispatch(ns)(event, showItem);\n\nexport const onHideInstance = (ns: string) => (event: Dialogic.InstanceEvent) =>\n  handleDispatch(ns)(event, hideItem);\n","import { Dialogic, filterCandidates, selectors } from 'dialogic';\nimport m, { Component } from 'mithril';\n\nimport { Instance } from './Instance';\nimport {\n  onHideInstance,\n  onInstanceMounted,\n  onShowInstance,\n} from './instanceEvents';\n\nexport const Wrapper: Component<Dialogic.DialogicalWrapperOptions> = {\n  view: ({ attrs }) => {\n    const nsOnInstanceMounted = onInstanceMounted(attrs.ns);\n    const nsOnShowInstance = onShowInstance(attrs.ns);\n    const nsOnHideInstance = onHideInstance(attrs.ns);\n\n    const identityOptions: Dialogic.IdentityOptions =\n      attrs.identityOptions || ({} as Dialogic.IdentityOptions);\n    const filtered = filterCandidates(\n      attrs.ns,\n      selectors.getStore(),\n      identityOptions,\n    );\n\n    return filtered.map(item =>\n      m(Instance, {\n        key: item.key,\n        identityOptions: item.identityOptions,\n        dialogicOptions: item.dialogicOptions as Dialogic.DialogicOptions<Dialogic.PassThroughOptions>,\n        passThroughOptions: item.passThroughOptions as Dialogic.PassThroughOptions,\n        onMount: nsOnInstanceMounted,\n        onShow: nsOnShowInstance,\n        onHide: nsOnHideInstance,\n      }),\n    );\n  },\n};\n","import { Dialogic } from 'dialogic';\nimport m, { Component } from 'mithril';\n\nimport { Wrapper } from './Wrapper';\n\ntype DialogicalFn = (\n  type: Dialogic.DialogicInstance,\n) => Component<Dialogic.ComponentOptions>;\n\nexport const Dialogical: DialogicalFn = instance => ({\n  oncreate: ({ attrs }) => {\n    if (typeof attrs.onMount === 'function') {\n      attrs.onMount();\n    }\n  },\n  view: ({ attrs }) => {\n    const identityOptions = {\n      id: attrs.id || instance.defaultId,\n      spawn: attrs.spawn || instance.defaultSpawn,\n    };\n    return m(Wrapper, {\n      identityOptions,\n      ns: instance.ns,\n    });\n  },\n});\n","import { dialog, notification } from 'dialogic';\nimport {\n  sharedUseDialog,\n  sharedUseDialogic,\n  sharedUseNotification,\n} from 'dialogic-hooks';\nimport { useEffect, useState } from 'mithril-hooks';\n\nexport const useDialogic = sharedUseDialogic({ useEffect, useState });\nexport const useDialog = sharedUseDialog({ useEffect, useState, dialog });\nexport const useNotification = sharedUseNotification({\n  useEffect,\n  useState,\n  notification,\n});\n","import { sharedUseRemaining } from 'dialogic-hooks';\nimport { useMemo, useState } from 'mithril-hooks';\n\nexport const useRemaining = sharedUseRemaining({ useMemo, useState });\n","import { dialog, Dialogic, notification, states } from 'dialogic';\nimport m from 'mithril';\n\nimport { Dialogical } from './Dialogical';\n\nconst Dialog = Dialogical(dialog);\nconst Notification = Dialogical(notification);\n\nexport { Dialog, dialog, Dialogic, Dialogical, Notification, notification };\nexport * from './useDialogic';\nexport * from './useRemaining';\n\nstates.map(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  state => m.redraw(),\n  // console.log(JSON.stringify(state, null, 2))\n);\n"],"names":["Instance","attrs","componentAttrs","domElement","dispatchTransition","dispatchFn","detail","identityOptions","show","onShow","hide","onHide","oncreate","vnode","dom","onMount","view","component","dialogicOptions","Error","passThroughOptions","m","className","handleDispatch","ns","event","fn","maybeItem","selectors","find","just","setDomElement","maybeTransitioningItem","Wrapper","nsOnInstanceMounted","showItem","nsOnShowInstance","onShowInstance","nsOnHideInstance","hideItem","onHideInstance","filterCandidates","getStore","map","item","key","Dialogical","instance","id","defaultId","spawn","defaultSpawn","useDialogic","sharedUseDialogic","useEffect","useState","useDialog","sharedUseDialog","dialog","useNotification","sharedUseNotification","notification","useRemaining","sharedUseRemaining","useMemo","Dialog","Notification","state","redraw"],"mappings":"ghBAQO,MAAMA,EAET,EAAGC,MAAOC,MACZ,IAAIC,EAEJ,MAAMC,EACJC,IAEAA,EAAW,CACTC,OAAQ,CACNC,gBAAiBL,EAAeK,gBAChCJ,WAAAA,MASAK,EAAO,KACXJ,EAAmBF,EAAeO,SAG9BC,EAAO,KACXN,EAAmBF,EAAeS,SAGpC,MAAO,CACLC,SAAWC,IACTV,EAAaU,EAAMC,IAbrBV,EAAmBF,EAAea,UAgBlCC,KAAM,EAAGf,MAAAA,MACP,MAAMgB,EAAYhB,EAAMiB,gBACrBD,UACH,IAAKA,EACH,MAAM,IAAIE,MAAM,0CAElB,MAAMC,EAAsBnB,EAAMmB,oBAA6B,GAC/D,OAAOC,UACL,MACA,CAAEC,UAAWrB,EAAMiB,gBAAgBI,WACnCD,UAAEJ,iCACGG,IACHZ,KAAAA,EACAE,KAAAA,SC9CGa,EAAkBC,GAAe,CAC5CC,EACAC,KAGA,MAAMC,EAAyCC,YAAUC,KACvDL,EACAC,EAAMnB,OAAOC,iBAEXoB,EAAUG,MACZC,gBAAcN,EAAMnB,OAAOH,WAAYwB,EAAUG,MAGnD,MAAME,EAAsDJ,YAAUC,KACpEL,EACAC,EAAMnB,OAAOC,iBAEXyB,EAAuBF,MACzBJ,EAAGM,EAAuBF,OChBjBG,EAAwD,CACnEjB,KAAM,EAAGf,MAAAA,MACP,MAAMiC,GDkBwBV,EClBgBvB,EAAMuB,GDmBtDC,GACGF,EAAeC,EAAfD,CAAmBE,EAAOU,aAFE,IAACX,ECjB9B,MAAMY,EDqBoB,CAACZ,GAAgBC,GAC7CF,EAAeC,EAAfD,CAAmBE,EAAOU,YCtBCE,CAAepC,EAAMuB,IACxCc,EDuBoB,CAACd,GAAgBC,GAC7CF,EAAeC,EAAfD,CAAmBE,EAAOc,YCxBCC,CAAevC,EAAMuB,IAExCjB,EACJN,EAAMM,iBAAoB,GAO5B,OANiBkC,mBACfxC,EAAMuB,GACNI,YAAUc,WACVnC,GAGcoC,IAAIC,GAClBvB,UAAErB,EAAU,CACV6C,IAAKD,EAAKC,IACVtC,gBAAiBqC,EAAKrC,gBACtBW,gBAAiB0B,EAAK1B,gBACtBE,mBAAoBwB,EAAKxB,mBACzBL,QAASmB,EACTzB,OAAQ2B,EACRzB,OAAQ2B,OCvBHQ,EAA2BC,KACtCnC,SAAU,EAAGX,MAAAA,MACkB,mBAAlBA,EAAMc,SACfd,EAAMc,WAGVC,KAAM,EAAGf,MAAAA,MACP,MAAMM,EAAkB,CACtByC,GAAI/C,EAAM+C,IAAMD,EAASE,UACzBC,MAAOjD,EAAMiD,OAASH,EAASI,cAEjC,OAAO9B,UAAEY,EAAS,CAChB1B,gBAAAA,EACAiB,GAAIuB,EAASvB,QCdN4B,EAAcC,oBAAkB,WAAEC,qBAAWC,aAC7CC,EAAYC,kBAAgB,WAAEH,qBAAWC,kBAAUG,WACnDC,EAAkBC,wBAAsB,WACnDN,qBACAC,wBACAM,iBCVWC,EAAeC,qBAAmB,SAAEC,mBAAST,aCEpDU,EAASnB,EAAWY,UACpBQ,EAAepB,EAAWe,yBAMzBlB,IAELwB,GAAS9C,UAAE+C"}